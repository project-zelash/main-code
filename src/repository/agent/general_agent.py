from src.repository.agent.tool_call_agent import ToolCallAgent

class GeneralAgent(ToolCallAgent):
    """
    Main implementation of general-purpose agent with memory and advanced features.
    """
    
    def __init__(self, llm, tools, system_prompt=None, name="GeneralAgent", verbose=False, max_iterations=5, memory_enabled=True):
        """
        Constructor for Memory agent.
        
        Args:
            llm: Language model instance used by the agent.
            tools: List of BaseTool instances available to the agent.
            system_prompt: Instructions that guide agent behavior. If None, uses default.
            name: String identifier for the agent.
            verbose: Boolean flag for detailed logging.
            max_iterations: Maximum tool calling iterations before stopping.
            memory_enabled: Boolean controlling conversation history tracking.
        """
        if system_prompt is None:
            system_prompt = self._get_default_system_prompt()
        
        super().__init__(llm, tools, system_prompt, name, verbose, max_iterations)
        self.memory_enabled = memory_enabled
        self.conversation_history = []
    
    def run(self, user_query, context=None):
        """
        Processes queries with conversation history as context.
        
        Args:
            user_query: The query to be processed by the agent.
            context: Optional context (e.g., conversation history) to use for the query.
            
        Returns:
            Response generated by the agent after potentially using tools.
        """
        try:
            if self.memory_enabled:
                # If context is provided and it contains memory, use that as conversation history
                if context is not None and isinstance(context, dict) and "memory" in context:
                    memory_context = context["memory"]
                    if isinstance(memory_context, list):
                        self.conversation_history = memory_context
                elif context is not None and isinstance(context, list):
                    # If context is directly a list (conversation history)
                    self.conversation_history = context
                # Ensure conversation_history is always a list
                if not isinstance(self.conversation_history, list):
                    self.conversation_history = []
            
            # Delegate to ToolCallAgent's run method
            response = super().run(user_query)
            
            if self.memory_enabled and isinstance(self.conversation_history, list):
                self.conversation_history.append({"user": user_query, "response": response})
            
            return response
        except Exception as e:
            import traceback
            return {
                "error_type": "AgentException",
                "error_message": str(e),
                "traceback": traceback.format_exc(),
                "input": user_query,
                "agent": getattr(self, 'name', str(self.__class__.__name__))
            }
    
    def _get_default_system_prompt(self):
        """
        Returns default system instructions.
        
        Returns:
            String containing default system prompt.
        """
        # Implementation will return a well-crafted default system prompt
        pass